<?php

namespace App\Http\Controllers;

use App\Feedback;
use App\Http\Requests\CheckoutRequest;
use App\Http\Requests\Client_UserRequest;

use App\Order;
use App\OrderDetail;
use App\Product;
use App\Repositories\Repository;
use App\Slide;
use App\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

use Illuminate\Support\Facades\Session;

class ClientController extends Controller {
	protected $orderModel;
	protected $orderDetailModel;

	function __construct(Order $orderModel, OrderDetail $orderDetailModel) {
		$this->orderModel       = new Repository($orderModel);
		$this->orderDetailModel = new Repository($orderDetailModel);
	}

	public function changeLanguage($language) {
		Session::put('website_language', "vi");

		return redirect()->back();
	}

	public function index() {
		$best_discount_product = Product::with(
			['images' => function ($query) {
					$query->where('active', 1)->get();
				}]
		)
		->orderBy('discount', 'desc')
		->orderBy('id', 'desc')
		->first();

		$products = Product::with(['images' => function ($query) {
					$query->where('active', 1)->get();
				}])
		->orderBy('id', 'desc')
		->take(4)
		->get();

		//recent view
		$arr = Session::get('recent_view', []);

		if ($arr) {
			$product_revent_view = Product::with(['images' => function ($query) {
						$query->where('active', 1)->get();
					}])
			->findOrFail(array_reverse($arr));
			$product_revent_view = $product_revent_view->take(6);
		} else {
			$product_revent_view = [];
		}
		$slides = Slide::get();
		return view('index', compact('products', 'slides', 'best_discount_product', 'product_revent_view'));
	}

	public function liveSearch(Request $request) {
		$keyword = $request->keyword;
		$data    = [];
		if ($keyword != null) {
			$data = Product::where('name', 'like', '%'.$keyword.'%')->limit(4)->get();
		}

		return $data;
	}

	public function search(Request $request) {
		$keyword  = $request->keyword;
		$category = null;
		$products = [];
		if ($keyword != null) {
			$products = Product::where('name', 'like', '%'.$keyword.'%')->paginate(5);
		}

		if ($request->ajax()) {
			return view('product_list', ['products' => $products, 'keyword' => $keyword])->render();
		}

		return view('filter', compact('products'));
	}

	public function detailProduct($id) {
		$product = Product::with('category')->with(['images' => function ($query) {
					$query->orderBy('active', 'desc')
					->orderBy('id', 'desc');
				}])->findOrFail($id);
		$products = Product::with('category')->with(['images' => function ($query) {
					$query->orderBy('active', 'desc')
					->orderBy('id', 'desc')->get();
				}])->where('category_id', '=', $product->category->id)
		->whereNotIn('id', [$product->id])
		->limit(3)->get();

		$feedback = Feedback::where('product_id', $id)->with('user')->get();

		//revent_view
		$arr = Session::get('recent_view', []);

		$key = in_array($id, $arr);

		if (!$key) {
			$arr[] = $id;
		}

		Session::put('recent_view', $arr);

		return view('product_detail', compact('product', 'feedback', 'products'));
	}

	public function detailProductData($id) {
		$product = Product::with('category')->with(['images' => function ($query) {
					$query->orderBy('active', 'desc')
					->orderBy('id', 'desc')->first();
				}])->findOrFail($id);

		return $product;
	}

	public function comment(Request $request) {
		$feedback             = new Feedback();
		$feedback->user_id    = Auth::id();
		$feedback->product_id = $request->product_id;
		$feedback->content    = $request->comment;
		$feedback->status     = 0;
		$feedback->save();
	}

	public function orders() {
		if (Auth::check()) {
			$user_id = Auth::id();
			$orders  = Order::where('user_id', $user_id)->orderBy('id', 'desc')->paginate(8);

			return view('order', compact('orders'));
		}

		return abort(404);
	}

	public function order_details($order_id) {
		$orderDetails = OrderDetail::with('product', 'size', 'toppings')->where('order_id', $order_id)->get();

		return $orderDetails;
	}

	public function cancel_order($order_id) {
		$order         = Order::findOrfail($order_id);
		$order->status = -1;
		$order->save();
	}

	public function cart() {
		$carts = [];
		if (Session::has('cart')) {
			$carts = Session('cart');
		}

		return view('cart', compact('carts'));
	}

	public function profile() {
		$user = Auth::user();

		return view('profile', compact('user'));
	}

	public function login() {
		return view('login');
	}

	public function register() {
		return view('register');
	}

	public function registerPost(Client_UserRequest $request) {
		if ($request->hasFile('avatar')) {
			$file    = $request->file('avatar');
			$name    = $file->getClientOriginalName();
			$newName = str_random(4).'_'.$name;

			while (file_exists(config('asset.image_path.avatar').$newName)) {
				$newName = str_random(4).'_'.$name;
			}

			$file->move(config('asset.image_path.avatar'), $newName);
			$image = $newName;
		} else {
			$image = null;
		}

		$user           = new User();
		$user->name     = $request->name;
		$user->email    = $request->email;
		$user->password = $request->password;
		$user->image    = $image;
		$user->address  = $request->address;
		$user->phone    = $request->phone;
		$user->role_id  = 3;
		$user->save();
	}

	public function filter(Request $request) {
		$category_id = $request->category_id;
		$price       = $request->price;
		$keyword     = $request->keyword;
		$products    = Product::with(['images' => function ($query) {
					$query->where('active', 1)->get();
				}])->with('category')->orderBy('id', 'desc')
		     ->when($category_id, function ($query, $category_id) {
				return $category_id != 0?$query->where('category_id', '=', $category_id):$query->get();
			})
		->when($price, function ($query, $price) {
				switch ($price) {
					case 1:
						{
							$query->whereBetween('price', [0, 30000])->orderBy('price')->get();
							break;
						}
					case 2:
						{
							$query->whereBetween('price', [30000, 50000])->orderBy('price')->get();
							break;
						}
					case 3:
						{
							$query->whereBetween('price', [50000, 70000])->orderBy('price')->get();
							break;
						}
					case 4:
						{
							$query->where('price', '>=', 70000)->get();
							break;
						}
					default:
						{
							$query->get();
						}
				}
			})
		->when($keyword, function ($query, $keyword) {
				$query->where('name', 'like', '%'.$keyword.'%')->get();
			})
		->paginate(6);

		if ($request->ajax()) {
			return view('product_list', ['products' => $products])->render();
		}

		return view('filter', compact('products'));
	}

	public function favorite(Request $request) {
		$product = Product::findOrFail($request->id);

		if (Auth::check()) {
			Auth::user()->products()->attach($product);
		}
	}

	public function checkout(CheckoutRequest $request) {
		session()->forget('status-cart');

		$cart = session('cart');

		$id = null;
		if (Auth::id()) {
			$id = Auth::id();
		}

		$dateTime = new \DateTime;

		date_default_timezone_set('Asia/Ho_Chi_Minh');
		$now = new \DateTime();

		$order = $this->orderModel->create([
				'receiver'    => $request->receiver,
				'user_id'     => $id,
				'order_time'  => $now->format('Y-m-d H:i:s'),
				'order_place' => $request->place,
				'order_phone' => $request->phone,
				'order_email' => $request->email,
				'status'      => 0,
				'note'        => $request->note,
			]);
		foreach ($cart as $product) {
			$orderDetail = $this->orderDetailModel->create([
					'product_id'    => $product['item']['product']->id,
					'product_price' => $product['item']['product_price'],
					'order_id'      => $order->id,
					'size'          => $product['item']['size'],
					'color'         => $product['item']['color'],
					'quantity'      => $product['item']['quantity'],
				]);
		}
		session()->put('status-cart', true);
		Session::forget('cart');
	}

	public function showProductByCate(Request $request) {
		$products = Product::where("category_id", $request->category_id)->get();
		return view("product_list", compact('products', $products));
	}
}
